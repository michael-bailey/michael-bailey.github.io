{"version":3,"sources":["res/img/profile smaller.png","components/HeaderBar/HeaderBar.jsx","pages/AboutPage/AboutPage.jsx","pages/CVPage/CVPage.jsx","components/GitRepo/GitRepo.jsx","pages/HomePage/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderBar","className","this","props","title","children","Component","AboutPage","CVPage","GitRepo","href","gitObject","html_url","name","description","HomePage","state","currentRepos","Gallery","getGithubPages","bind","map","item","console","log","fetch","then","res","json","result","setState","src","profile","alt","App","page","onClick","switchPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,6C,2OCGtBC,G,mLAGb,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,kBACX,4BAAMC,KAAKC,MAAMC,QAGrB,wBAAIH,UAAU,WACRC,KAAKC,MAAME,e,GAVMC,cCDlBC,E,uKAEb,OACI,6BACI,gCACA,8CACA,6C,GANuBD,aCAlBE,E,uKAEb,OACI,6BACI,qC,GAJoBF,a,gBCEfG,G,0NAQb,OACI,yBAAKR,UAAU,WACX,uBAAGS,KAAMR,KAAKC,MAAMQ,UAAUC,UAAU,4BAAKV,KAAKC,MAAMQ,UAAUE,OAClE,2BAAIX,KAAKC,MAAMQ,UAAUG,kB,GAXJR,cCMhBS,G,kNAEjBC,MAAQ,CACJC,aAAc,GACdC,QAAS,I,uDAGJf,GACLD,KAAKiB,eAAeC,KAAKlB,Q,uCAKzB,OACI,oCACKA,KAAKc,MAAMC,aAAaI,KAAI,SAASC,GAAM,OAAQ,kBAAC,EAAD,CAASX,UAAWW,U,0CAK/D,IAAD,OAChBC,QAAQC,IAAItB,KAAKc,OACjBS,MAAM,qDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAW,EAAKC,SAAS,CAACb,aAAcY,IAASN,QAAQC,IAAI,EAAKR,Y,+BAIxE,OACI,oCACI,yBAAKe,IAAKC,IAASC,IAAI,wBAAYhC,UAAU,iBAC7C,oCACA,qFAA0D,6BAA1D,oCACA,yBAAKA,UAAU,mBACX,2CACA,uFAC6D,6BAD7D,yFAE0F,6BAF1F,wDAKA,oDACA,yBAAKA,UAAU,YACVC,KAAKiB,mBAGd,yBAAKlB,UAAU,mBACX,2CACA,mGACyE,6BADzE,yGAGA,yBAAKA,UAAU,kB,GAlDGK,cCFjB4B,E,4MACnBlB,MAAQ,CACNmB,KAAM,kBAAC,EAAD,O,yDAGGA,GACTZ,QAAQC,IAAI,YACZtB,KAAK4B,SAAS,CACZK,KAAMA,M,+BAIA,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CAAW/B,MAAM,kBACf,wBAAIgC,QAAS,kBAAM,EAAKC,WAAW,kBAAC,EAAD,SAAnC,QACA,wBAAID,QAAS,kBAAM,EAAKC,WAAW,kBAAC,EAAD,SAAnC,YACA,wBAAID,QAAS,kBAAM,EAAKC,WAAW,kBAAC,EAAD,SAAnC,UAEF,yBAAKpC,UAAU,cACZC,KAAKc,MAAMmB,W,GArBW7B,aCIbgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.9ac06ab3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile smaller.5090c71e.png\";","import React, { Component } from \"react\";\nimport \"./HeaderBar.css\"\n\nexport default class HeaderBar extends Component {\n\n    render() {\n        return (\n            <div className=\"HeaderBar\">\n                <div className='HeaderContents'>\n                    <h1>{ this.props.title }</h1>\n                </div>\n\n                <ul className=\"MenuBar\">\n                    { this.props.children }\n                </ul>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\"\n\nexport default class AboutPage extends Component {\n    render() {\n        return(\n            <div>\n                <image></image>\n                <h2>michael bailey</h2>\n                <h3>projects</h3>\n            </div>\n        );\n    }\n};","import React, { Component } from \"react\"\n\nexport default class CVPage extends Component {\n    render() {\n        return(\n            <div>\n                <image></image>\n            </div>\n        );\n    }\n};","import React, { Component } from \"react\";\n\nimport \"./GitRepo.css\"\n\nexport default class GitRepo extends Component {\n\n    componentDidMount() {\n\n    }\n    \n\n    render() {\n        return(\n            <div className=\"GitRepo\">\n                <a href={this.props.gitObject.html_url}><h3>{this.props.gitObject.name}</h3></a>\n                <p>{this.props.gitObject.description}</p>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport profile from \"../../res/img/profile smaller.png\"\nimport GitRepo from \"../../components/GitRepo/GitRepo\"\n\n// importing images\n\n\nimport \"./HomePage.css\"\n\nexport default class HomePage extends Component {\n\n    state = {\n        currentRepos: [],\n        Gallery: []\n    }\n\n    HomePage(props) {\n        this.getGithubPages.bind(this);\n    }\n\n    getGithubPages() {\n        \n        return(\n            <>\n                {this.state.currentRepos.map(function(item){return (<GitRepo gitObject={item} />)})}        \n            </>\n        )\n    }\n\n    componentDidMount() {\n        console.log(this.state)\n        fetch(\"https://api.github.com/users/michael-bailey/repos\")\n        .then(res => res.json())\n        .then(result => {this.setState({currentRepos: result});console.log(this.state)})\n    }\n\n    render() {\n        return(\n            <>\n                <img src={profile} alt=\"¯\\_(ツ)_/¯\" className=\"ProfileImage\" />\n                <h2>Home</h2>\n                <p>This is a website dedicated to my projects and hobbies.<br/> as well as infomation about me.</p>\n                <div className=\"ProgrammingSect\">\n                    <h3>Programming</h3>\n                    <p>\n                        Quite a lot of what i do in my spare time is programming.<br/>\n                        This ranges from some test programs to try a specific area of a language or computing.<br/>\n                        to a few larger projects (for example this website).\n                    </p>\n                    <h4>Current Repositories</h4>\n                    <div className=\"RepoSect\">\n                        {this.getGithubPages()}\n                    </div>\n                </div>\n                <div className=\"PhotographySect\">\n                    <h3>Photography</h3>\n                    <p>\n                        As a small side project i have started doing some simple photography.<br/>basiclly messing about with a camera taking pictures of plants as they make good desktop backgrounds.\n                    </p>\n                    <div className=\"Gallery\">\n                        \n                    </div>\n                </div>\n            </>\n        );\n    }\n};","import React, { Component } from 'react';\nimport './App.css';\nimport HeaderBar from './components/HeaderBar/HeaderBar';\n\nimport AboutPage from './pages/AboutPage/AboutPage';\nimport CVPage from \"./pages/CVPage/CVPage\";\nimport HomePage from \"./pages/HomePage/HomePage\";\n\nexport default class App extends Component {\n  state = {\n    page: <HomePage />,\n  }\n\n  switchPage(page) {\n    console.log(\"changing\")\n    this.setState({\n      page: page\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <HeaderBar title=\"Michael Bailey\">\n          <li onClick={() => this.switchPage(<HomePage />)}>Home</li>\n          <li onClick={() => this.switchPage(<CVPage />)}>Projects</li>\n          <li onClick={() => this.switchPage(<AboutPage />)}>About</li>\n        </HeaderBar>\n        <div className=\"pageSpacer\">\n          {this.state.page}\n        </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}